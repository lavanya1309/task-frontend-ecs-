name: CI/CD Frontend - ECS EC2 Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'Dockerfile'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  APP_NAME: lms-frontend
  DOCKER_USERNAME: somasekar1309
  REPO_NAME: testingpipline-lms-frontend
  DYNAMODB_TABLE: terraform-locks
  STATE_LOCK_ID: ecs/terraform.tfstate

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check-source.outputs.should-build }}
      terraform-changed: ${{ steps.check-terraform.outputs.terraform-changed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for Source File Changes
        id: check-source
        run: |
          CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E 'src/|public/|package.json|Dockerfile' || true)
          if [ -z "$CHANGED" ]; then
            echo "No relevant source changes detected"
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "Relevant source changes detected"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for Terraform File Changes
        id: check-terraform
        run: |
          CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E 'terraform/' || true)
          if [ -z "$CHANGED" ]; then
            echo "No Terraform changes detected"
            echo "terraform-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Terraform changes detected"
            echo "terraform-changed=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Docker Image Version Tag
        run: |
          VERSION_TAG="v${{ github.run_number }}"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=$DOCKER_USERNAME/$REPO_NAME:$VERSION_TAG" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_LATEST=$DOCKER_USERNAME/$REPO_NAME:latest" >> $GITHUB_ENV
          echo "ðŸ“¦ Docker tag: $VERSION_TAG"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm ci

      - name: Build React Frontend
        run: npm run build

      - name: Create .dockerignore
        run: |
          echo "node_modules" > .dockerignore
          echo "terraform" >> .dockerignore
          echo ".github" >> .dockerignore

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST

      - name: Push Docker Images
        run: |
          docker push $DOCKER_IMAGE
          docker push $DOCKER_IMAGE_LATEST

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1.0.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  terraform-apply:
    needs: [check-changes, build-and-push]
    if: needs.check-changes.outputs.terraform-changed == 'true' || needs.check-changes.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Remove Stuck DynamoDB Lock
        run: |
          aws dynamodb delete-item \
            --table-name $DYNAMODB_TABLE \
            --key "{\"LockID\": {\"S\": \"$STATE_LOCK_ID\"}}" \
            --region $AWS_REGION || true

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var="docker_image=$DOCKER_USERNAME/$REPO_NAME:latest" -var="prevent_destroy=true"

      - name: Terraform Apply
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        working-directory: terraform
        run: |
          terraform destroy -auto-approve -var="docker_image=$DOCKER_USERNAME/$REPO_NAME:latest" -var="prevent_destroy=false"
          terraform apply -auto-approve -var="docker_image=$DOCKER_USERNAME/$REPO_NAME:latest" -var="prevent_destroy=false"

      - name: Terraform Destroy (All Resources)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        working-directory: terraform
        run: |
          terraform destroy -auto-approve \
            -var="docker_image=$DOCKER_USERNAME/$REPO_NAME:latest" \
            -var="prevent_destroy=false"
